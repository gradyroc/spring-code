<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--    配置spring的IOC ，把service对象【配置进来-->

    <bean id="accountServiceAdvice" class="cn.grady.service.impl.AccountServiceAdvice"></bean>


    <!--    配置logger 类-->
    <bean id="Logger" class="cn.grady.utils.Logger"></bean>


    <!--    配置AOP-->
    <aop:config>
        <!--            配置切入点表达式 id属性用于指定表达式的唯一标识，
                              expression 属性用于指定表达式内容
                              此标签鞋子aop：aspect标签内部，之恩给你当前切面使用。
                              它还可以写在aop：aspect外面，此时就变成了所有切面可用，此时必须写在aop：aspect切面之前
                               -->
        <aop:pointcut id="pt1" expression="execution(* cn.grady.service.impl.*.*(..))"/>

        <!--        配置切面-->
        <aop:aspect id="logAdvice" ref="Logger">
            <!--     配置通知的类型，建立通知方法和切入点的关联-->
            <!-- pointcut="execution(public void cn.grady.service.impl.AccountServiceAdvice.saveAccount())"></aop:before>-->
            <!--            <aop:before method="printLog"-->
            <!--                        pointcut="execution(* *..*.*(..))"></aop:before>-->
            <!--            前置通知 切入点方法执行之前-->
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>
            <!--            后置通知 切入点方法正常执行之后，它和异常通知永远只能执行一个-->
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>
            <!--            异常通知 切入点方法执行产生异常之后， 它和后置通知永远只能执行一个-->
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
            <!--            最终通知： 无论切入点方法是否正常执行，都会在其之后执行-->
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>


            <!--            配置环绕通知,详细注释看Logger 类中-->
            <aop:around method="arroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>